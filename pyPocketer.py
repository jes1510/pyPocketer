'''
Written by Jesse Merritt
February 12, 2012

   This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Generates G-Code to re-surface a CNC table or mill pockets,  

The GUI requires WX.

The program depends on the following modules:
wx:  	Manages the GUI
wx.lib.newevent:  Event manager

Change Log:
------------------------------------------------------------------------------------------------------


'''
import serial 
import wx
import sys
import os
import time

version = "0.1"

#Dimensions
x = 0	# Location of X Axis
y = 0	# Location of Y Axis
z = 0	# Location of Z Axis

units = 'Imperial'
unitsList = 'Imperial', 'Metric'
directionList = ['X', 'Y']
preferredDirection = 'Y'

header = ';	Generated by pyPocketer, a simple pocketing program written in python;\n;	Written by Jesse Merritt\n;	https://github.com/jes1510/pyPocketer\n\n'
	  
	  
  
class MainWindow(wx.Frame):
    def __init__(self, parent, title="pyPocketer") :    
	global preferredDirection
	global directionList
        self.parent = parent       
        mainFrame = wx.Frame.__init__(self,self.parent, title=title, size=(800,400))         
        
        mainPanel = wx.Panel(self, -1, style=wx.SUNKEN_BORDER)
        
        #   Build sizers and statusbar
        self.sizer1 = wx.BoxSizer(wx.HORIZONTAL) 
        self.sizer2 = wx.BoxSizer(wx.HORIZONTAL) 
        self.sizer3 = wx.BoxSizer(wx.HORIZONTAL) 
        self.sizer4 = wx.BoxSizer(wx.HORIZONTAL) 
        self.sizer5 = wx.BoxSizer(wx.HORIZONTAL) 
        self.sizer6 = wx.BoxSizer(wx.HORIZONTAL) 
        self.sizer7 = wx.BoxSizer(wx.HORIZONTAL)   
        self.sizer8 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer9 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer10 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer11 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer12 = wx.BoxSizer(wx.HORIZONTAL)
        self.rootSizer = wx.BoxSizer(wx.VERTICAL)                        
        self.statusBar = self.CreateStatusBar()                              # statusbar in the bottom of the window                                  

        # Setting up the menus
        filemenu= wx.Menu()
        setupmenu = wx.Menu()
        helpmenu = wx.Menu()       

        menuSave = filemenu.Append(wx.ID_SAVE, "Save", "Save the current data")     
        filemenu.AppendSeparator()
        menuExit = filemenu.Append(wx.ID_EXIT,"E&xit"," Terminate the program")     
        menuAbout = helpmenu.Append(wx.ID_ABOUT, "&About"," Information about this program")  

        # Menubar
        menuBar = wx.MenuBar()
        menuBar.Append(filemenu,"&File")                    # Adding the "filemenu" to the MenuBar       
        menuBar.Append(helpmenu, "Help")
        self.SetMenuBar(menuBar)                            # Adding the MenuBar to the Frame content.        
        
        #	Input boxes for distance and speed\        
  

					
        self.unitsLabel = wx.StaticText(mainPanel, 1, "Units:")
        self.unitsBox = wx.ComboBox(mainPanel, -1, choices=unitsList)
        
        self.xLabel = wx.StaticText(mainPanel, 1, "X Dimension:")
        self.xBox = wx.TextCtrl(self)
        
        self.yLabel = wx.StaticText(mainPanel, 1, "Y Dimension:")
        self.yBox = wx.TextCtrl(self) 
        
        self.diameterLabel = wx.StaticText(mainPanel, 1, "Tool Diameter")
        self.diameterBox = wx.TextCtrl(self) 
        
        self.overlapLabel = wx.StaticText(mainPanel, 1, "Percent Overlap")
        self.overlapBox = wx.TextCtrl(self)
        
        self.liftLabel = wx.StaticText(mainPanel, 1, "Z Liftoff Height:")
        self.liftBox = wx.TextCtrl(self)
        
        self.finalDepthLabel = wx.StaticText(mainPanel, 1, "Final Depth:")
        self.finalDepthBox = wx.TextCtrl(self)
        
        self.stepDepthLabel = wx.StaticText(mainPanel, 1, "Max Step Depth:")
        self.stepDepthBox = wx.TextCtrl(self)
        
        self.speedLabel = wx.StaticText(mainPanel, 1, "Feed Rate:")
        self.speedBox = wx.TextCtrl(self)
        
        self.directionLabel = wx.StaticText(mainPanel, 1, "Preferred Direction:")
        self.directionBox = wx.ComboBox(mainPanel, -1, choices=directionList)
        
        self.ofLabel = wx.StaticText(mainPanel, 1, "Output filename:")
        self.ofBox = wx.TextCtrl(self)    
      
        self.writeFileButton = wx.Button(mainPanel, -1, 'Write to file')
        
        #  Sizers.  Everything is on rootSizer         
        self.sizer1.Add(self.unitsLabel, 1, wx.EXPAND)
        self.sizer1.Add(self.unitsBox, 1, wx.EXPAND)
        
        self.sizer2.Add(self.xLabel, 1, wx.EXPAND)
        self.sizer2.Add(self.xBox, 1, wx.EXPAND)  
        
        self.sizer3.Add(self.yLabel, 1, wx.EXPAND)
        self.sizer3.Add(self.yBox, 1, wx.EXPAND)
        
        self.sizer4.Add(self.diameterLabel, 1, wx.EXPAND)
        self.sizer4.Add(self.diameterBox, 1, wx.EXPAND) 
        
        self.sizer5.Add(self.overlapLabel, 1, wx.EXPAND)
        self.sizer5.Add(self.overlapBox, 1, wx.EXPAND)
        
        self.sizer6.Add(self.liftLabel, 1, wx.EXPAND)
        self.sizer6.Add(self.liftBox, 1, wx.EXPAND)
        
        self.sizer7.Add(self.finalDepthLabel, 1, wx.EXPAND)
        self.sizer7.Add(self.finalDepthBox, 1, wx.EXPAND)        
        
        self.sizer8.Add(self.stepDepthLabel, 1, wx.EXPAND)
        self.sizer8.Add(self.stepDepthBox, 1, wx.EXPAND) 
        
        self.sizer9.Add(self.speedLabel, 1, wx.EXPAND)
        self.sizer9.Add(self.speedBox, 1, wx.EXPAND)
        
        
        self.sizer10.Add(self.directionLabel, 1, wx.EXPAND)
        self.sizer10.Add(self.directionBox, 1, wx.EXPAND) 
        
        self.sizer11.Add(self.ofLabel, 1, wx.EXPAND)
        self.sizer11.Add(self.ofBox, 1, wx.EXPAND)  
        
        self.sizer12.Add(self.writeFileButton, 1, wx.EXPAND)  
        
        self.rootSizer.Add(self.sizer1, 1, wx.EXPAND)
        self.rootSizer.Add(self.sizer2, 1, wx.EXPAND)
        self.rootSizer.Add(self.sizer3, 1, wx.EXPAND)
        self.rootSizer.Add(self.sizer4, 1, wx.EXPAND)
        self.rootSizer.Add(self.sizer5, 1, wx.EXPAND)
        self.rootSizer.Add(self.sizer6, 1, wx.EXPAND)
        self.rootSizer.Add(self.sizer7, 1, wx.EXPAND)
        self.rootSizer.Add(self.sizer8, 1, wx.EXPAND)
        self.rootSizer.Add(self.sizer9, 1, wx.EXPAND)
        self.rootSizer.Add(self.sizer10, 1, wx.EXPAND)  
        self.rootSizer.Add(self.sizer11, 1, wx.EXPAND)
        self.rootSizer.Add(self.sizer12, 1, wx.EXPAND) 

	#	Bind events to buttons
        self.Bind(wx.EVT_CLOSE, self.OnExit)
#       self.Bind(wx.EVT_MENU, self.OnAbout, menuAbout)
        self.Bind(wx.EVT_MENU, self.OnExit, menuExit)
#       self.Bind(wx.EVT_MENU, self.setupPort, menuPorts)
#       self.Bind(wx.EVT_MENU, self.OnSave, menuSave)
        self.Bind(wx.EVT_BUTTON, self.writeFile, self.writeFileButton)
        self.Bind(wx.EVT_COMBOBOX, self.selectUnits, self.unitsBox)
	self.Bind(wx.EVT_COMBOBOX, self.selectDirection, self.directionBox)

        # set the sizers
        self.SetSizer(self.rootSizer)
        self.SetAutoLayout(1)
        self.rootSizer.Fit(self)     
        
        #	Set preset values
	self.xBox.SetValue('14.0')
	self.yBox.SetValue('11.5')	
	self.diameterBox.SetValue('.75')
	self.overlapBox.SetValue('50')	
	self.liftBox.SetValue('1.0')
	self.finalDepthBox.SetValue('-0.125')
	self.stepDepthBox.SetValue('0.125')
	self.ofBox.SetValue('table.ngc')	
        self.unitsBox.SetValue('Imperial')
        self.directionBox.SetValue('Y')
        self.speedBox.SetValue('12')
        
        preferredDirection = directionList[self.directionBox.GetSelection()]
        
        self.Layout()
	self.Show(True)		
	
    def selectUnits(self, e):
	global unitsList	
	global units	
	
        units = unitsList[e.GetSelection()]
        print units
        
    def selectDirection(self, e) :
	global directionList
	global preferredDirection
	preferredDirection = directionList[e.GetSelection()]
	print preferredDirection        
	
    def showComError(self) :     #	Can't open COM port
        dlg = wx.MessageDialog(self, "Could not open COM port!", 'Error!', wx.OK | wx.ICON_ERROR)  
        dlg.ShowModal()
        self.OnExit(self)	#	Dump out
        
    def showComWriteError(self) :     #	Can't open COM port
        dlg = wx.MessageDialog(self, "Error writing to Com port!", 'Error!', wx.OK | wx.ICON_ERROR)  
        dlg.ShowModal()
        
    def showComTimeoutError(self) :     #	Can't open COM port
        dlg = wx.MessageDialog(self, "Controller did not respond!", 'Error!', wx.OK | wx.ICON_ERROR)  
        dlg.ShowModal() 
        
    def showValueError(self) :	#	General error.  Not really implemented
        dlg = wx.MessageDialog(self, "There is a value wrong!", 'Error!', wx.OK | wx.ICON_ERROR)  
        dlg.ShowModal()
 
    def OnExit(self,e):         # stuff to do when the program is ending     
        global ser
        try :
	  self.ser.close()  	# Needs to be in a try in case it wasn't opened
	except :
	  pass
	
        self.Destroy()              # wipe out window and dump to the OS
        
    def readDistance(self) :
      try :
	d = abs(round(float(self.distanceBox.GetValue()), 6))
      	return d
      	
      except :	
	self.showValueError()      


    def writeFile(self, e) :
      global header   
      global x
      global y
      global z
      global preferredDirection
      
      try :
	filename = self.ofBox.GetValue()
	feedRate = str(float(self.speedBox.GetValue()))
	diameter = float(self.diameterBox.GetValue())
	xMax = float(self.xBox.GetValue())
	yMax = float(self.yBox.GetValue())
	toolDiamter = float(self.diameterBox.GetValue())
	zMax = float(self.liftBox.GetValue())
	maxDepth = float(self.finalDepthBox.GetValue())
	stepValue = float(self.stepDepthBox.GetValue())	
	
      except :
	self.showValueError()

      overlap = float(self.overlapBox.GetValue())/100
      print overlap
      of = open(filename, 'w')
      of.write(header)
      of.write(';	X = ' + str(xMax) + '\n')
      of.write(';	Y = ' + str(yMax) + '\n')
      of.write(';	Preferred Direction = ' + preferredDirection + '\n')
      of.write(';\n')      
      of.write(';	Start of Code\n')
      of.write(';---------------------------------------\n\n')

      if units == 'Imperial' :
	of.write('G20\n')
      else :
	of.write('G21\n')      
      
      of.write('f' + feedRate + '\n')      
      of.write('G0 z' + str(zMax) + '\n') 
      
      z = 0 - stepValue
      
      while z > (maxDepth - stepValue)  :   
	of.write('G0 z' + str(z) + '\n')
	
	if preferredDirection == 'Y' :	
	  xSteps = self.drange(float(diameter) * overlap,xMax, float(diameter) * overlap) 
	  idx = 0
	  for i in range(0,len(xSteps)):	
	    idx = idx + 1
	    of.write('G0 y' + str(yMax) + '\n') 
	  
	    try :
	      of.write('G0 x' + str(xSteps[idx]) + '\n')
	      of.write('G0 y0\n')	
	      idx = idx + 1
	      of.write('G0 x' + str(xSteps[idx]) + '\n' )
	      
	    
	    except :	    
	      of.write('G0 x' + str(xMax) + '\n')
	      of.write('G0 y0\n')
	      break 
	   
  
	if preferredDirection == 'X' : 
	  ySteps = self.drange(float(diameter) * overlap,yMax, float(diameter) * overlap) 
	  idx = 0
	  for i in range(0,len(ySteps)):	
	    idx = idx + 1
	    of.write('G0 x' + str(xMax) + '\n') 
	  
	    try :
	      of.write('G0 y' + str(ySteps[idx]) + '\n')
	      of.write('G0 x0\n')	
	      idx = idx + 1
	      of.write('G0 y' + str(ySteps[idx]) + '\n' )
	   
	    except :	    
	      of.write('G0 y' + str(yMax) + '\n')
	      of.write('G0 x0\n')
	      break
	z -= abs(stepValue)
	
      
      of.write('G0 z' + str(zMax) + '\n')
      of.write('G1 x0 y0\n')
      of.write(';	End of code\n')
      of.close()
      
  
      
    def drange (self, start, stop, step) :
      r = start
      l = []
      while r < stop :
	l.append(r)
	r += step
      return l

    

    

app = wx.App(False)         # wx instance
frame = MainWindow(None)    # main window frame

app.MainLoop()
